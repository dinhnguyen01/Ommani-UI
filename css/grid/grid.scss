// Define variables for common widths and margins
$grid-padding: 4px;
$tablet-padding: 8px;
$pc-medium-padding: 12px;
$pc-low-padding: 12px;
$pc-low-gutter-padding: 5px;

// Define mixin for media queries
@mixin media-query($min-width, $max-width: null) {
  @if $max-width {
    @media (min-width: $min-width) and (max-width: $max-width) {
      @content;
    }
  } @else {
    @media (min-width: $min-width) {
      @content;
    }
  }
}

// Grid styles
.grid {
  width: 100%;
  display: block;
  padding: 0;
}

.grid.wide {
  max-width: 1200px;
  margin: 0 auto;
}

// Row styles
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -$grid-padding;
  margin-right: -$grid-padding;
}

.row.no-gutters {
  margin-left: 0;
  margin-right: 0;
}

// Column styles
.col {
  padding-left: $grid-padding;
  padding-right: $grid-padding;
}

.row.no-gutters .col {
  padding-left: 0;
  padding-right: 0;
}

// Column classes for various widths
@for $i from 0 through 12 {
  .c-#{$i} {
    @if $i == 0 {
      display: none;
    } @else {
      flex: 0 0 #{percentage($i / 12)};
      max-width: #{percentage($i / 12)};
    }
  }
}

// Offset classes for columns
@for $i from 1 through 11 {
  .c-o-#{$i} {
    margin-left: #{percentage($i / 12)};
  }
}

// Media queries
@include media-query(740px) {
  .row {
    margin-left: -$tablet-padding;
    margin-right: -$tablet-padding;
  }

  .col {
    padding-left: $tablet-padding;
    padding-right: $tablet-padding;
  }

  // Column classes for tablet widths
  @for $i from 1 through 12 {
    .m-#{$i} {
      flex: 0 0 #{percentage($i / 12)};
      max-width: #{percentage($i / 12)};
    }
  }

  // Offset classes for tablet columns
  @for $i from 1 through 11 {
    .m-o-#{$i} {
      margin-left: #{percentage($i / 12)};
    }
  }
}

@include media-query(1113px) {
  .row {
    margin-left: -$pc-medium-padding;
    margin-right: -$pc-medium-padding;
  }

  .row.sm-gutter {
    margin-left: -$pc-low-gutter-padding;
    margin-right: -$pc-low-gutter-padding;
  }

  .col {
    padding-left: $pc-medium-padding;
    padding-right: $pc-medium-padding;
  }

  .row.sm-gutter .col {
    padding-left: $pc-low-gutter-padding;
    padding-right: $pc-low-gutter-padding;
  }

  // Column classes for PC medium resolutions
  @for $i from 0 through 12 {
    .l-#{$i} {
      @if $i == 0 {
        display: none;
      } @else {
        flex: 0 0 #{percentage($i / 12)};
        max-width: #{percentage($i / 12)};
      }
    }
  }

  // Offset classes for PC medium resolutions
  @for $i from 1 through 11 {
    .l-o-#{$i} {
      margin-left: #{percentage($i / 12)};
    }
  }
}

@include media-query(1024px, 1239px) {
  .wide {
    width: 984px;
  }

  .wide .row {
    margin-left: -$pc-medium-padding;
    margin-right: -$pc-medium-padding;
  }

  .wide .row.sm-gutter {
    margin-left: -$pc-low-gutter-padding;
    margin-right: -$pc-low-gutter-padding;
  }

  .wide .col {
    padding-left: $pc-medium-padding;
    padding-right: $pc-medium-padding;
  }

  .wide .row.sm-gutter .col {
    padding-left: $pc-low-gutter-padding;
    padding-right: $pc-low-gutter-padding;
  }

  // Column classes for wide containers at PC resolutions
  @for $i from 0 through 12 {
    .wide .l-#{$i} {
      @if $i == 0 {
        display: none;
      } @else {
        flex: 0 0 #{percentage($i / 12)};
        max-width: #{percentage($i / 12)};
      }
    }
  }

  // Offset classes for wide containers at PC resolutions
  @for $i from 1 through 11 {
    .wide .l-o-#{$i} {
      margin-left: #{percentage($i / 12)};
    }
  }
}
